AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cake Shop SaaS EC2 Instance Template (Free Tier Eligible)'

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: The latest Amazon Linux 2 AMI from the Parameter Store

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type (t2.micro is free tier eligible).

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  DBHost:
    Description: RDS endpoint
    Type: String

  DBName:
    Description: Database name
    Type: String
    Default: cakeshop

  DBUser:
    Description: Database user
    Type: String
    Default: admin

  DBPassword:
    Description: Database password
    Type: String
    NoEcho: true

  RedisHost:
    Description: Redis host for caching (optional)
    Type: String
    Default: "none"

  S3Bucket:
    Description: S3 bucket for media storage
    Type: String
    Default: "cakeshop-media-unique"

Resources:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation

  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Create a log file for debugging
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

          echo "Starting user data script execution..."

          # Determine OS version
          if grep -q "Amazon Linux release 2023" /etc/os-release; then
            echo "Detected Amazon Linux 2023"
            # Amazon Linux 2023 commands
            dnf update -y
            dnf install -y httpd git
            dnf install -y php php-gd php-mbstring php-xml php-curl php-zip php-intl php-bcmath php-json php-mysqlnd
          else
            echo "Detected Amazon Linux 2"
            # Amazon Linux 2 commands
            yum update -y
            amazon-linux-extras enable php7.4
            yum install -y httpd git
            yum install -y php php-gd php-mbstring php-xml php-curl php-zip php-intl php-bcmath php-json php-mysqlnd
          fi

          # Check if Apache was installed successfully
          if ! command -v httpd &> /dev/null; then
            echo "ERROR: Apache (httpd) installation failed!"
            exit 1
          fi

          # Create web directory if it doesn't exist
          echo "Creating web directory..."
          mkdir -p /var/www/html

          # Start and enable Apache
          echo "Starting and enabling Apache..."
          systemctl start httpd
          systemctl enable httpd

          # Check if Apache is running
          if ! systemctl is-active --quiet httpd; then
            echo "ERROR: Apache (httpd) failed to start!"
            systemctl status httpd
            exit 1
          fi

          # Clone the repository
          echo "Cloning the repository..."
          cd /var/www/html
          git clone https://github.com/Harydhk7/cakeshop-saas.git .

          # Check if the repository was cloned successfully
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to clone the repository!"
            exit 1
          fi

          # Set proper permissions
          echo "Setting permissions..."
          chown -R apache:apache /var/www/html
          chmod -R 755 /var/www/html

          # Create a simple index.html file to test the web server
          echo "Creating test index.html..."
          cat > /var/www/html/index.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>Cake Shop SaaS</title>
            <style>
              body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
              h1 { color: #F8BBD0; }
              p { color: #795548; }
            </style>
          </head>
          <body>
            <h1>Cake Shop SaaS</h1>
            <p>The server is running successfully!</p>
            <p>PrestaShop installation will be available soon.</p>
          </body>
          </html>
          EOF

          # Create necessary directories for PrestaShop
          echo "Creating PrestaShop directories..."
          mkdir -p /var/www/html/src/app/config
          mkdir -p /var/www/html/src/config

          # Generate a secret and creation date
          echo "Generating secret and creation date..."
          SECRET=$(openssl rand -base64 32)
          CREATION_DATE=$(date +%Y-%m-%d)

          # Create parameters.php with environment substitutions
          echo "Creating parameters.php..."
          cat > /var/www/html/src/app/config/parameters.php <<EOF
          <?php
          return [
              'parameters' => [
                  'database_host' => "${DBHost}",
                  'database_port' => '',
                  'database_name' => "${DBName}",
                  'database_user' => "${DBUser}",
                  'database_password' => "${DBPassword}",
                  'database_prefix' => 'ps_',
                  'database_engine' => 'InnoDB',
                  'mailer_transport' => 'smtp',
                  'mailer_host' => '127.0.0.1',
                  'mailer_user' => null,
                  'mailer_password' => null,
                  'secret' => "$SECRET",
                  'ps_caching' => 'CacheMemcache',
                  'ps_cache_enable' => true,
                  'ps_creation_date' => "$CREATION_DATE",
                  'redis_host' => "${RedisHost}",
                  'redis_port' => '6379',
              ]
          ];
          EOF

          # Create defines.inc.php for S3
          echo "Creating defines.inc.php..."
          cat > /var/www/html/src/config/defines.inc.php <<EOF
          <?php
          define('_PS_MEDIA_SERVER_1_', 'https://${S3Bucket}.s3.amazonaws.com');
          define('_PS_MEDIA_SERVER_2_', 'https://${S3Bucket}.s3.amazonaws.com');
          define('_PS_MEDIA_SERVER_3_', 'https://${S3Bucket}.s3.amazonaws.com');
          EOF

          # Restart Apache
          echo "Restarting Apache..."
          systemctl restart httpd

          # Final check
          if systemctl is-active --quiet httpd; then
            echo "SUCCESS: Apache is running and the server is ready!"
          else
            echo "ERROR: Apache is not running after setup!"
            systemctl status httpd
            exit 1
          fi

          echo "User data script execution completed successfully!"

Outputs:
  WebServerSecurityGroup:
    Description: Security group for web servers
    Value: !Ref WebServerSecurityGroup

  WebServerInstance:
    Description: EC2 instance for the web server
    Value: !Ref WebServerInstance
